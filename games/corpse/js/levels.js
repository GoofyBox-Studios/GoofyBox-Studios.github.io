/* global ctx blockSprites tileSprites Struct Cell UV */

let s = 10; // Spike

const levels = [
  {
    name: "Zigzag",
    tiles: [
      [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
      [1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,2],
      [0,0,0,2,2,2,2,2,2,2,2,2,s,s,s,2],
      [0,0,0,2,2,2,2,2,2,2,2,2,1,1,1,2],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
      [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
      [s,s,s,s,2,2,2,2,2,2,2,2,2,2,2,2],
      [1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2]
    ],
    crumbles: [
      {x: 13, y: 3, w: 2},
      {x: 1, y: 6, w: 2},
    ],
    flames: [],
    maxDeaths: 4,
  },
  {
    name: "Stepping Stones",
    tiles: [
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11],
      [9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],
      [2,2,2,0,0,0,0,0,0,0,0,0,0,2,2,2],
      [1,1,1,s,s,s,s,s,s,s,s,s,s,1,1,1],
      [1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,1]
    ],
    crumbles: [
      {x: 4, y: 12, w: 2},
    ],
    flames: [],
    maxDeaths: 6,
  },
  {
    name: "Heat Run",
    tiles: [
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0],
      [8,0,0,0,0,0,0,2,2,0,0,1,1,0,0,11],
      [9,0,0,0,2,2,0,1,1,0,0,1,1,0,0,12],
      [2,2,2,2,2,2,2,1,1,2,2,1,1,2,2,2]
    ],
    crumbles: [
    ],
    flames: [
      {x: 4.5, y: 12.5},
    ],
    maxDeaths: 4,
  },
  {
    name: "Chompy Garden",
    tiles: [
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [8,0,0,0,0,0,0,2,2,0,0,0,0,0,0,11],
      [9,0,0,0,2,2,0,1,1,0,0,0,0,0,0,12],
      [2,2,2,2,1,1,2,1,1,2,2,2,2,2,2,2]
    ],
    crumbles: [
    ],
    flames: [
    ],
    maxDeaths: 4,
  },
  // {
  //   name: "Cog Wheels",
  //   tiles: [
  //     [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  //     [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  //     [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
  //     [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1],
  //     [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  //     [8,0,0,0,2,2,0,0,0,0,0,0,0,0,0,11],
  //     [9,0,2,2,1,1,10,10,10,0,0,0,0,0,0,12],
  //     [2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2]
  //   ],
  //   crumbles: [
  //   ],
  //   flames: [
  //   ],
  // },
  {
    name: "Exit",
    tiles: [
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0],
      [8,0,0,0,0,0,0,0,0,0,0,0,14,0,14,0],
      [9,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0],
      [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
    ],
    crumbles: [
    ],
    flames: [
    ],
  }
];

class Level {
  constructor(tiles, width, height) {
    this.tiles = parseLevel(tiles);
    this.width = width;
    this.height = height;

    // this.spikeFrame = 0;
    // this.spikeFrames = [20, 21, 22, 23, 24, 25, 26, 27, 27, 27, 20, 21, 22, 23, 24, 25, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27]
  }
  
  draw() {
    // this.spikeFrame += 0.25;
    for (let y = 0; y < 15; y++) {
      for (let x = 0; x < 16; x++) {
        let cell = this.tiles[y][x];
        if (cell.id > 0) {
          let drawX = x * 16;
          let drawY = y * 16;
          
          // let uv = blockSprites[tile].uv;
          
          const uv = cell.uv ?? blockSprites[cell.id].uv;
          
          ctx.drawImage(tileSprites[0], uv.x, uv.y, uv.width, uv.height, drawX, drawY, uv.width, uv.height);
        }
      }
    }
  }
}

function getTile(level, x, y) {
  return level[y]?.[x] ?? 1;
}

function isSolid(tile) {
  return tile != 0 && tile != s && tile != 11 && tile != 12 && tile != 8 && tile != 9;
}

function parseBlock(level, x, y) {
  const tile10 = isSolid(getTile(level, x + 0, y - 1));
  const tile01 = isSolid(getTile(level, x - 1, y + 0));
  // const tile11 = isSolid(getTile(level, x + 0, y + 0));
  const tile21 = isSolid(getTile(level, x + 1, y + 0));
  const tile12 = isSolid(getTile(level, x + 0, y + 1));
  
  const tile00 = isSolid(getTile(level, x - 1, y - 1));
  const tile20 = isSolid(getTile(level, x + 1, y - 1));
  const tile02 = isSolid(getTile(level, x - 1, y + 1));
  const tile22 = isSolid(getTile(level, x + 1, y + 1));
  
  let tileX = 1 - tile21 + tile01;
  let tileY = 1 - tile12 + tile10;
  
  if (!tile21 && !tile01) tileX = 3;
  if (!tile12 && !tile10) tileY = 3;
  
  if (tileX == 1 && tileY == 1) {
    const openCount = !tile00 + !tile20 + !tile02 + !tile22;
    if (openCount >= 1) {
      const type = !tile00 * 1 + !tile20 * 2 + !tile02 * 4 + !tile22 * 8 - 1;
      tileX = 3 + (type % 4);
      tileY = 4 + Math.floor(type / 4);
    }
  }
  
  if (tileX == 1 && tileY == 2 && (!tile00 || !tile20)) {
    tileX = !tile00 + !tile20 * 2 - 1;
    tileY = 7;
  }
  
  return new Cell(1, new UV(tileX * 16, tileY * 16, 16, 16));
}

function parseLevel(level) {
  const newLevel = [];
  
  for (let rowId = 0; rowId < level.length; rowId++) {
    const row = level[rowId];
    const newRow = [];
    
    for (let cellId = 0; cellId < row.length; cellId++) {
      const cell = row[cellId];
      
      if (cell == 0) {
        newRow.push(new Cell(0));
        continue;
      }
      
      if (cell == s) {
        newRow.push(new Cell(4));
        continue;
      }
      
      if (cell == 11) {
        newRow.push(new Cell(2));
        continue;
      }
      
      if (cell == 12) {
        newRow.push(new Cell(3));
        continue;
      }
      
      if (cell == 8 || cell == 9) {
        newRow.push(new Cell(0)); // TEMP
        continue;
      }
      
      newRow.push(parseBlock(level, cellId, rowId));
    }
    
    newLevel.push(newRow);
  }
  
  return newLevel;
}